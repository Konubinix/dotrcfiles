#!/bin/bash

function git_prompt()
{
  ## Git is required
  [ `which git` ] || return

  ## Get some information on the repository
  local repoInfo
  repoInfo=`git rev-parse --git-dir \
    --is-bare-repository \
    --abbrev-ref --symbolic-full-name HEAD 2>/dev/null`
  local repoInfoExitCode="$?"
  # Not a repository, exit
  [ "$repoInfoExitCode" != "0" ] && return
  # Parse information
  local localInfo="${repoInfo##*$'\n'}"
  repoInfo="${repoInfo%$'\n'*}"
  local bareRepo="${repoInfo##*$'\n'}"
  repoInfo="${repoInfo%$'\n'*}"
  local gitDir="${repoInfo##*$'\n'}"

  ## Check local information (current branch name or commit hash)
  [ "$localInfo" = "HEAD" ] && localInfo=`git rev-parse --short HEAD`

  ## Get information relative to tracking branch (if one)
  # Get information
  local tracking=`git rev-list --left-right HEAD...HEAD@{upstream} 2>/dev/null`
  # Parse tracking
  local aheadOrLocalBranch=`echo "$tracking" | grep -c '^<'`
  local behindOrTrackingBranch=`echo "$tracking" | grep -c '^>'`
  # Build tracking display
  local trackingInfo
  if [ "$aheadOrLocalBranch" -eq 0 -a "$behindOrTrackingBranch" -eq 0 ]
  then
    trackingInfo=""
  elif [ "$aheadOrLocalBranch" -gt 0 -a "$behindOrTrackingBranch" -gt 0 ]
  then
    trackingInfo="${aheadOrLocalBranch}Y$behindOrTrackingBranch"
  elif [ "$aheadOrLocalBranch" -gt 0 ]
  then
    trackingInfo="↑$aheadOrLocalBranch"
  elif [ "$behindOrTrackingBranch" -gt 0 ]
  then
    trackingInfo="↓$behindOrTrackingBranch"
  fi

  ## Get work tree status (if not a bare repo)
  if [ "$bareRepo" = "false" ]
  then
    # Moving to work tree (to handle .git location)
    # assuming it is not a separate repository
    cd "$gitDir/.."
    # Get status
    local status=`git status --porcelain`
    # Parse status
    local conflicts=`echo "$status" | grep -c '^\(U.\|.U\|AA\|DD\)'`
    local staged=`echo "$status" | grep '^[MADRC][ MD]' | grep -c -v '^DD'`
    local modified=`echo "$status" | grep -c '^[ MARD][MD]'`
    local untracked=`echo "$status" | grep -c '^??'`
    # Build work tree display
    local workingTree
    [ "$conflicts" -gt 0 ] && workingTree+="⚡$conflicts"
    [ "$staged" -gt 0 ] && workingTree+="+"
    [ "$modified" -gt 0 ] && workingTree+="*"
    [ "$untracked" -gt 0 ] && workingTree+="…"
  fi

  ## Aggregate and display the result
  echo -n "($localInfo)$trackingInfo$workingTree"
}
